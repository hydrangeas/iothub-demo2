# Issue #6: バッチ処理機能の実装

## 概要
LogEntryオブジェクトをバッチとして効率的に処理するためのバッチ処理機能を実装します。

## 詳細要件
- バッチキューイングシステムの実装
  - ログエントリの効率的なキューイング
  - プロデューサー/コンシューマーパターンの実装
  - 非同期チャネル（System.Threading.Channels）の活用
  - スレッドセーフな処理の保証
- サイズベースバッチング
  - バッチサイズの上限設定（最大1MB）
  - 動的なサイズ計算ロジック
  - メモリ効率の良いサイズ管理
  - サイズに基づくバッチの分割
- カウントベースバッチング
  - エントリ数の上限設定（最大10,000エントリ）
  - バッチのエントリ数監視
  - エントリ数に基づくバッチの分割
  - 効率的なカウント管理
- バッチ処理間隔の設定と制御
  - 時間ベースのバッチ処理トリガー（デフォルト30秒）
  - アイドル時間検出とバッチフラッシュ
  - スケジュールベースの処理制御
  - 処理タイミングの最適化ロジック

## 受け入れ基準
- LogEntryオブジェクトを効率的にバッチ処理できること
- サイズ上限（1MB）を超えないように制御できること
- エントリ数上限（10,000エントリ）を超えないように制御できること
- 設定された間隔で定期的にバッチ処理が実行されること
- スレッドセーフに複数のソースからエントリを受け付けられること

## 作業記録
- 2025/03/27: タスク開始、要件確認
- 2025/03/27: バッチ処理機能の実装
  - MachineLog.Common.Batchディレクトリを作成
  - BatchProcessorOptions.cs: バッチ処理のオプションクラスを実装
  - IBatchProcessor.cs: バッチ処理のインターフェースを実装
  - BatchQueue.cs: System.Threading.Channelsを使用したスレッドセーフなキューを実装
  - BatchProcessorBase.cs: バッチ処理の基本クラスを実装
  - LogEntryBatchProcessor.cs: LogEntryのバッチ処理クラスを実装
  - BatchProcessingExample.cs: バッチ処理機能の使用例を実装
  - MachineLog.Common.csprojにSystem.Threading.Channelsパッケージを追加